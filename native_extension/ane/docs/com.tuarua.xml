<?xml version="1.0" encoding="UTF-8"?><apiPackage id="com.tuarua"><apiName>com.tuarua</apiName><apiDetail/><apiClassifier id="com.tuarua:Firebase"><apiName>Firebase</apiName><shortdesc/><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef></apiClassifierDetail><apiOperation id="com.tuarua:Firebase:analytics"><apiName>analytics</apiName><shortdesc> Returns the FirebaseAnalytics instance.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiOperationClassifier>com.tuarua.firebase:Analytics</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc> Returns the FirebaseAnalytics instance. </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.tuarua:Firebase:auth"><apiName>auth</apiName><shortdesc> Returns the FirebaseAuth instance.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiOperationClassifier>com.tuarua.firebase:Auth</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc> Returns the FirebaseAuth instance. </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.tuarua:Firebase:crashlytics"><apiName>crashlytics</apiName><shortdesc> Returns the Crashlytics instance.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiOperationClassifier>com.tuarua.firebase:Crashlytics</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc> Returns the Crashlytics instance. </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.tuarua:Firebase:dispose"><apiName>dispose</apiName><shortdesc> Disposes the ANE </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc> Disposes the ANE </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.tuarua:Firebase:dynamicLinks"><apiName>dynamicLinks</apiName><shortdesc> Returns the FirebaseDynamicLinks instance.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiOperationClassifier>com.tuarua.firebase:DynamicLinks</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc> Returns the FirebaseDynamicLinks instance. </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.tuarua:Firebase:firestore"><apiName>firestore</apiName><shortdesc> Returns the FirebaseFirestore instance.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiOperationClassifier>com.tuarua.firebase:Firestore</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc> Returns the FirebaseFirestore instance. </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.tuarua:Firebase:init"><apiName>init</apiName><shortdesc> Initialise the ANE </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc> Initialise the ANE </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.tuarua:Firebase:messaging"><apiName>messaging</apiName><shortdesc> Returns the FirebaseMessaging instance.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiOperationClassifier>com.tuarua.firebase:Messaging</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc> Returns the FirebaseMessaging instance. </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.tuarua:Firebase:remoteConfig"><apiName>remoteConfig</apiName><shortdesc> Returns the FirebaseRemoteConfig instance.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiOperationClassifier>com.tuarua.firebase:RemoteConfig</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc> Returns the FirebaseRemoteConfig instance. </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.tuarua:Firebase:storage"><apiName>storage</apiName><shortdesc> Returns the FirebaseStorage instance.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiOperationClassifier>com.tuarua.firebase:Storage</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc> Returns the FirebaseStorage instance. </apiDesc></apiOperationDetail></apiOperation><apiValue id="com.tuarua:Firebase:isGooglePlayServicesAvailable:get"><apiName>isGooglePlayServicesAvailable</apiName><shortdesc> returns true if the user has the required version of Google Play Services.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc> returns true if the user has the required version of Google Play Services. Always returns true on iOS.</apiDesc></apiValueDetail></apiValue><apiValue id="com.tuarua:Firebase:options:get"><apiName>options</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiValueClassifier>com.tuarua.firebase:FirebaseOptions</apiValueClassifier></apiValueDef></apiValueDetail></apiValue></apiClassifier><apiClassifier id="com.tuarua:OneSignal"><apiName>OneSignal</apiName><shortdesc/><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef></apiClassifierDetail><apiOperation id="com.tuarua:OneSignal:addTrigger"><apiName>addTrigger</apiName><shortdesc>
     Allows you to set an individual trigger key/value pair for in-app message targeting
     </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>key</apiItemName><apiType value="String"/></apiParam><apiParam><apiItemName>value</apiItemName><apiType value="any"/></apiParam></apiOperationDef><apiDesc>
     Allows you to set an individual trigger key/value pair for in-app message targeting
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.tuarua:OneSignal:addTriggers"><apiName>addTriggers</apiName><shortdesc>
     Allows you to set multiple trigger key/value pairs simultaneously with a Map
     Triggers are used for targeting in-app messages.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>json</apiItemName><apiType value="String"/></apiParam></apiOperationDef><apiDesc>
     Allows you to set multiple trigger key/value pairs simultaneously with a Map
     Triggers are used for targeting in-app messages.
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.tuarua:OneSignal:cancelNotification"><apiName>cancelNotification</apiName><shortdesc>
     Cancels a single OneSignal notification based on its Android notification integer ID.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>id</apiItemName><apiType value="int"/><apiDesc>    </apiDesc></apiParam></apiOperationDef><apiDesc>
     Cancels a single OneSignal notification based on its Android notification integer ID.
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.tuarua:OneSignal:clearOneSignalNotifications"><apiName>clearOneSignalNotifications</apiName><shortdesc>
     Removes all OneSignal notifications from the Notification Shade.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
     Removes all OneSignal notifications from the Notification Shade.
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.tuarua:OneSignal:consentGranted"><apiName>consentGranted</apiName><shortdesc> If your application is set to require the user's privacy consent, you can provide this consent using this
     method.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="Boolean"/></apiParam></apiOperationDef><apiDesc> If your application is set to require the user's privacy consent, you can provide this consent using this
     method. Until you call provideUserConsent(true), the SDK will not fully initialize, and will not send
     any data to OneSignal.</apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.tuarua:OneSignal:deleteTag"><apiName>deleteTag</apiName><shortdesc>
     Deletes a single tag that was previously set on a user with sendTag or sendTags.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>key</apiItemName><apiType value="String"/><apiDesc>Key to remove
     </apiDesc></apiParam></apiOperationDef><apiDesc>
     Deletes a single tag that was previously set on a user with sendTag or sendTags.
     Use deleteTags if you need to delete more than one.
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.tuarua:OneSignal:deleteTags"><apiName>deleteTags</apiName><shortdesc>
     Deletes one or more tags that were previously set on a user with sendTag or sendTags.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>keys</apiItemName><apiType value="Vector$String"/><apiDesc>Keys to remove
     </apiDesc></apiParam></apiOperationDef><apiDesc>
     Deletes one or more tags that were previously set on a user with sendTag or sendTags.
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.tuarua:OneSignal:dispose"><apiName>dispose</apiName><shortdesc> Disposes the ANE </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc> Disposes the ANE </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.tuarua:OneSignal:enableSound"><apiName>enableSound</apiName><shortdesc>
     By default OneSignal plays the system's default notification sound when the
     device's notification system volume is turned on.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="Boolean"/><apiDesc>Passing false means that the device will only vibrate unless the device is set to a total silent mode.
     </apiDesc></apiParam></apiOperationDef><apiDesc>
     By default OneSignal plays the system's default notification sound when the
     device's notification system volume is turned on.
     <p>If true(default) - Sound plays when receiving notification. Vibrates when device is on vibrate only mode.</p>
     <p>If false - Only vibrates unless EnableVibrate(false) was set.</p>
     <p><i>You can link this action to a UI button to give your user a different sound option for your notifications.</i></p>
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.tuarua:OneSignal:enableVibrate"><apiName>enableVibrate</apiName><shortdesc>
     By default OneSignal always vibrates the device when a notification is displayed unless the
     device is in a total silent mode.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="Boolean"/><apiDesc>Passing false means that the device will only vibrate lightly when the device is in it's vibrate only mode.
     </apiDesc></apiParam></apiOperationDef><apiDesc>
     By default OneSignal always vibrates the device when a notification is displayed unless the
     device is in a total silent mode.
     <p>If true(default) - Device will always vibrate unless the device is in silent mode.</p>
     <p>If false - Device will only vibrate when the device is set on it's vibrate only mode.</p>
     <p><i>You can link this action to a UI button to give your user a vibration option for your notifications.</i></p>
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.tuarua:OneSignal:getPermissionSubscriptionState"><apiName>getPermissionSubscriptionState</apiName><shortdesc>
     Get the current notification and permission state.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>com.tuarua.onesignal:OSPermissionSubscriptionState</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
     Get the current notification and permission state.
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.tuarua:OneSignal:getTags"><apiName>getTags</apiName><shortdesc>
     Retrieve a list of tags that have been set on the user from the OneSignal server.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>listener</apiItemName><apiType value="Function"/><apiDesc>    </apiDesc></apiParam></apiOperationDef><apiDesc>
     Retrieve a list of tags that have been set on the user from the OneSignal server.
     Android will provide a cached copy if there is no network connection.
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.tuarua:OneSignal:getTriggerValueForKey"><apiName>getTriggerValueForKey</apiName><shortdesc> Returns a single trigger value for the given key (if it exists, otherwise returns null) </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="String"/></apiReturn><apiParam><apiItemName>key</apiItemName><apiType value="String"/></apiParam></apiOperationDef><apiDesc> Returns a single trigger value for the given key (if it exists, otherwise returns null) </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.tuarua:OneSignal:init"><apiName>init</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>appId</apiItemName><apiType value="String"/></apiParam><apiParam><apiItemName>autoPromptLocation</apiItemName><apiType value="Boolean"/><apiData>false</apiData></apiParam><apiParam><apiItemName>disableGmsMissingPrompt</apiItemName><apiType value="Boolean"/><apiData>false</apiData></apiParam><apiParam><apiItemName>filterOtherGCMReceivers</apiItemName><apiType value="Boolean"/><apiData>false</apiData></apiParam><apiParam><apiItemName>unsubscribeWhenNotificationsAreDisabled</apiItemName><apiType value="Boolean"/><apiData>false</apiData></apiParam><apiParam><apiItemName>inFocusDisplaying</apiItemName><apiType value="int"/><apiData>unknown</apiData></apiParam></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="com.tuarua:OneSignal:logoutEmail"><apiName>logoutEmail</apiName><shortdesc>
     Call when user logs out of their account.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
     Call when user logs out of their account.
     This dissociates the device from the email address.
     This does not effect the subscription status of the email address itself.
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.tuarua:OneSignal:pauseInAppMessages"><apiName>pauseInAppMessages</apiName><shortdesc>
     Can temporarily pause in-app messaging on this device.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>pause</apiItemName><apiType value="Boolean"/><apiDesc>The boolean that pauses/resumes in-app messages
     </apiDesc></apiParam></apiOperationDef><apiDesc>
     Can temporarily pause in-app messaging on this device.
     Useful if you don't want to interrupt a user while playing a match in a game.
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.tuarua:OneSignal:postNotification"><apiName>postNotification</apiName><shortdesc>
     Allows you to send notifications from user to user or schedule ones in the future to be delivered
     to the current device.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>json</apiItemName><apiType value="String"/><apiDesc>Contains notification options, see <xref href="https://documentation.onesignal.com/reference#create-notification">OneSignal | Create Notification</xref>
                  POST call for all options.
     </apiDesc></apiParam><apiParam><apiItemName>onSuccess</apiItemName><apiType value="Function"/><apiData>null</apiData><apiDesc>    </apiDesc></apiParam><apiParam><apiItemName>onFailure</apiItemName><apiType value="Function"/><apiData>null</apiData><apiDesc>    </apiDesc></apiParam></apiOperationDef><apiDesc>
     Allows you to send notifications from user to user or schedule ones in the future to be delivered
     to the current device.
     <p><b>Note:</b> You can only use include_player_ids as a targeting parameter from your app.
     Other target options such as tags and included_segments require your OneSignal
     App REST API key which can only be used from your server.</p>
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.tuarua:OneSignal:promptLocation"><apiName>promptLocation</apiName><shortdesc> Prompts the user for location permissions to allow geotagging from the OneSignal dashboard.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc> Prompts the user for location permissions to allow geotagging from the OneSignal dashboard.
     This lets you send notifications based on the device's location.
     See Location-Triggered Notifications for more details.
     Make sure you add location permissions in your AndroidManifest.xml and/or info.plist.
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.tuarua:OneSignal:removeExternalUserId"><apiName>removeExternalUserId</apiName><shortdesc>
     If your user logs out of your app, and you would like to disassociate their custom User ID
     rom your system with their OneSignal User ID, you will want to call this method.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>listener</apiItemName><apiType value="Function"/><apiData>null</apiData><apiDesc>    </apiDesc></apiParam></apiOperationDef><apiDesc>
     If your user logs out of your app, and you would like to disassociate their custom User ID
     rom your system with their OneSignal User ID, you will want to call this method.
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.tuarua:OneSignal:removeTriggerForKey"><apiName>removeTriggerForKey</apiName><shortdesc> Removes a single trigger for the given key </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>key</apiItemName><apiType value="String"/></apiParam></apiOperationDef><apiDesc> Removes a single trigger for the given key </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.tuarua:OneSignal:removeTriggersForKeys"><apiName>removeTriggersForKeys</apiName><shortdesc> Removes a list/collection of triggers from their keys with a Collection of Strings </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>keys</apiItemName><apiType value="Vector$String"/></apiParam></apiOperationDef><apiDesc> Removes a list/collection of triggers from their keys with a Collection of Strings </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.tuarua:OneSignal:sendTag"><apiName>sendTag</apiName><shortdesc>
     Tag a user based on an app event of your choosing so later you can later create segments to target these users.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>key</apiItemName><apiType value="String"/><apiDesc>Key of your choosing to create or update
     </apiDesc></apiParam><apiParam><apiItemName>value</apiItemName><apiType value="Boolean"/><apiDesc>Value to set on the key. NOTE: Passing in a blank String deletes the key,
     you can also call deleteTag or deleteTags.
     </apiDesc></apiParam></apiOperationDef><apiDesc>
     Tag a user based on an app event of your choosing so later you can later create segments to target these users.
     Use sendTags if you need to set more than one tag on a user at a time.
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.tuarua:OneSignal:sendTags"><apiName>sendTags</apiName><shortdesc>
     Tag a user based on an app event of your choosing, so that later you can create segments to target these users.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>json</apiItemName><apiType value="String"/><apiDesc>    </apiDesc></apiParam></apiOperationDef><apiDesc>
     Tag a user based on an app event of your choosing, so that later you can create segments to target these users.
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.tuarua:OneSignal:setEmail"><apiName>setEmail</apiName><shortdesc>
     Set an email for the device to later send emails to this address
     </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>email</apiItemName><apiType value="String"/><apiDesc>The email that you want subscribe and associate with the device
     </apiDesc></apiParam><apiParam><apiItemName>emailAuthHash</apiItemName><apiType value="String"/><apiData>null</apiData><apiDesc>Generated auth hash from your server to authorize. (Recommended)
                          Create and send this hash from your backend to your app after
                              the user logs into your app.
                          DO NOT generate this from your app!
                          Omit this value if you do not have a backend to authenticate the user.
     </apiDesc></apiParam><apiParam><apiItemName>onSuccess</apiItemName><apiType value="Function"/><apiData>null</apiData><apiDesc>if the update succeeds
     </apiDesc></apiParam><apiParam><apiItemName>onFailure</apiItemName><apiType value="Function"/><apiData>null</apiData><apiDesc>if the update fails
     
     </apiDesc></apiParam></apiOperationDef><apiDesc>
     Set an email for the device to later send emails to this address
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.tuarua:OneSignal:setExternalUserId"><apiName>setExternalUserId</apiName><shortdesc>
     If your system assigns unique identifiers to users, it can be to have to also remember their OneSignal
     Player Id's as well.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>userId</apiItemName><apiType value="String"/><apiDesc>    </apiDesc></apiParam><apiParam><apiItemName>listener</apiItemName><apiType value="Function"/><apiData>null</apiData><apiDesc>    </apiDesc></apiParam></apiOperationDef><apiDesc>
     If your system assigns unique identifiers to users, it can be to have to also remember their OneSignal
     Player Id's as well. To make things easier, OneSignal now allows you to set an external_user_id for your users.
     Simply call this method, pass in your custom user Id (as a string), and from now on when you send a push
     notification, you can use include_external_user_ids instead of include_player_ids.
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.tuarua:OneSignal:setInFocusDisplaying"><apiName>setInFocusDisplaying</apiName><shortdesc> Setting to control how OneSignal notifications will be shown when one is received while
     your app is in focus.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc> Setting to control how OneSignal notifications will be shown when one is received while
     your app is in focus. </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.tuarua:OneSignal:setLocationShared"><apiName>setLocationShared</apiName><shortdesc> Disable or enable location collection (defaults to enabled if your app has location permission).</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="Boolean"/></apiParam></apiOperationDef><apiDesc> Disable or enable location collection (defaults to enabled if your app has location permission).
     <p>Note: This method must be called before OneSignal init on iOS.</p></apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.tuarua:OneSignal:setLogLevel"><apiName>setLogLevel</apiName><shortdesc> Enable logging to help debug if you run into an issue setting up OneSignal.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>logLevel</apiItemName><apiType value="int"/><apiDesc>Sets the logging level to print to the Android LogCat log or Xcode log.
     </apiDesc></apiParam><apiParam><apiItemName>visualLevel</apiItemName><apiType value="int"/><apiDesc>Sets the logging level to show as alert dialogs.
     
     </apiDesc></apiParam></apiOperationDef><apiDesc> Enable logging to help debug if you run into an issue setting up OneSignal.
     This selector is static, so you can call it before OneSignal init.
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.tuarua:OneSignal:setRequiresUserPrivacyConsent"><apiName>setRequiresUserPrivacyConsent</apiName><shortdesc>
     For GDPR users, your application should call this method before initialization of the SDK.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="Boolean"/></apiParam></apiOperationDef><apiDesc>
     For GDPR users, your application should call this method before initialization of the SDK.
     
     <p>If you pass in true, your application will need to call provideConsent(true) before the OneSignal
     SDK gets fully initialized. Until this happens, you can continue to call methods
     (such as sendTags()), but nothing will happen.</p>
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.tuarua:OneSignal:setSubscription"><apiName>setSubscription</apiName><shortdesc>
     The user must first subscribe through the native prompt or app settings.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="Boolean"/><apiDesc>    </apiDesc></apiParam></apiOperationDef><apiDesc>
     The user must first subscribe through the native prompt or app settings. It does not officially
     subscribe or unsubscribe them from the app settings, it unsubscribes them from receiving push from OneSignal.
     You can only call this method with false to opt out users from receiving notifications through OneSignal.
     You can pass true later to opt users back into notifications.
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.tuarua:OneSignal:shared"><apiName>shared</apiName><shortdesc> The ANE instance.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiOperationClassifier>com.tuarua:OneSignal</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc> The ANE instance. </apiDesc></apiOperationDetail></apiOperation><apiValue id="com.tuarua:OneSignal:sdkType:get"><apiName>sdkType</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="com.tuarua:OneSignal:userProvidedPrivacyConsent:get"><apiName>userProvidedPrivacyConsent</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef></apiValueDetail></apiValue><apiValue id="com.tuarua:OneSignal:version:get"><apiName>version</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef></apiValueDetail></apiValue></apiClassifier></apiPackage>