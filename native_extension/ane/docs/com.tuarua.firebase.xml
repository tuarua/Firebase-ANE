<?xml version="1.0" encoding="UTF-8"?><apiPackage id="com.tuarua.firebase"><apiName>com.tuarua.firebase</apiName><apiDetail/><apiClassifier id="com.tuarua.firebase:Storage"><apiName>Storage</apiName><shortdesc/><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef></apiClassifierDetail><apiOperation id="com.tuarua.firebase:Storage:dispose"><apiName>dispose</apiName><shortdesc> Disposes the ANE </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc> Disposes the ANE </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.tuarua.firebase:Storage:reference"><apiName>reference</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>com.tuarua.firebase.storage:StorageReference</apiOperationClassifier></apiReturn><apiParam><apiItemName>path</apiItemName><apiType value="String"/><apiData>null</apiData></apiParam><apiParam><apiItemName>url</apiItemName><apiType value="String"/><apiData>null</apiData></apiParam></apiOperationDef></apiOperationDetail></apiOperation><apiValue id="com.tuarua.firebase:Storage:maxDownloadRetryTime:set"><apiName>maxDownloadRetryTime</apiName><shortdesc>
     Maximum time in seconds to retry a download if a failure occurs.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
     Maximum time in seconds to retry a download if a failure occurs.
     Defaults to 10 minutes (600000 milliseconds).
     </apiDesc></apiValueDetail></apiValue><apiValue id="com.tuarua.firebase:Storage:maxOperationRetryTime:set"><apiName>maxOperationRetryTime</apiName><shortdesc>
     Maximum time in seconds to retry operations other than upload and download if a failure occurs.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
     Maximum time in seconds to retry operations other than upload and download if a failure occurs.
     Defaults to 2 minutes (120000 milliseconds).
     </apiDesc></apiValueDetail></apiValue><apiValue id="com.tuarua.firebase:Storage:maxUploadRetryTime:set"><apiName>maxUploadRetryTime</apiName><shortdesc>
     Maximum time in seconds to retry an upload if a failure occurs.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
     Maximum time in seconds to retry an upload if a failure occurs.
     Defaults to 10 minutes (600000 milliseconds).
     </apiDesc></apiValueDetail></apiValue><apiValue id="com.tuarua.firebase:Storage:url:set"><apiName>url</apiName><shortdesc> The gs:// url to your Firebase Storage Bucket.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="write"/><apiType value="String"/></apiValueDef><apiDesc> The gs:// url to your Firebase Storage Bucket. </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="com.tuarua.firebase:Vision"><apiName>Vision</apiName><shortdesc/><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef></apiClassifierDetail><apiOperation id="com.tuarua.firebase:Vision:cloudDocumentTextRecognizer"><apiName>cloudDocumentTextRecognizer</apiName><shortdesc>
     Gets a cloud document text recognizer configured with the given options.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>A document text recognizer configured with the given options.
     </apiDesc><apiOperationClassifier>com.tuarua.firebase.ml.vision.document:CloudDocumentTextRecognizer</apiOperationClassifier></apiReturn><apiParam><apiItemName>options</apiItemName><apiOperationClassifier>com.tuarua.firebase.ml.vision.document:CloudDocumentRecognizerOptions</apiOperationClassifier><apiData>null</apiData><apiDesc>Options for configuring the cloud document text recognizer.
     </apiDesc></apiParam></apiOperationDef><apiDesc>
     Gets a cloud document text recognizer configured with the given options.
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.tuarua.firebase:Vision:cloudLabelDetector"><apiName>cloudLabelDetector</apiName><shortdesc>
     Gets an instance of cloud label detector with the given options.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>A cloud label detector configured with the given options.
     </apiDesc><apiOperationClassifier>com.tuarua.firebase.ml.vision.label:CloudImageLabeler</apiOperationClassifier></apiReturn><apiParam><apiItemName>options</apiItemName><apiOperationClassifier>com.tuarua.firebase.ml.vision.label:CloudImageLabelerOptions</apiOperationClassifier><apiData>null</apiData><apiDesc>Options for configuring the cloud label detector.
     </apiDesc></apiParam></apiOperationDef><apiDesc>
     Gets an instance of cloud label detector with the given options.
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.tuarua.firebase:Vision:cloudLandmarkDetector"><apiName>cloudLandmarkDetector</apiName><shortdesc>
     Gets an instance of cloud landmark detector with the given options.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>A cloud landmark detector configured with the given options.
     </apiDesc><apiOperationClassifier>com.tuarua.firebase.ml.vision.cloud.landmark:CloudLandmarkDetector</apiOperationClassifier></apiReturn><apiParam><apiItemName>options</apiItemName><apiOperationClassifier>com.tuarua.firebase.ml.vision.cloud:CloudDetectorOptions</apiOperationClassifier><apiData>null</apiData><apiDesc>Options for configuring the cloud landmark detector.
     </apiDesc></apiParam></apiOperationDef><apiDesc>
     Gets an instance of cloud landmark detector with the given options.
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.tuarua.firebase:Vision:cloudTextRecognizer"><apiName>cloudTextRecognizer</apiName><shortdesc>
     Gets a cloud text recognizer configured with the given options.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>A text recognizer configured with the given options.
     </apiDesc><apiOperationClassifier>com.tuarua.firebase.ml.vision.text:CloudTextRecognizer</apiOperationClassifier></apiReturn><apiParam><apiItemName>options</apiItemName><apiOperationClassifier>com.tuarua.firebase.ml.vision.text:CloudTextRecognizerOptions</apiOperationClassifier><apiData>null</apiData><apiDesc>Options for configuring the cloud text recognizer.
     </apiDesc></apiParam></apiOperationDef><apiDesc>
     Gets a cloud text recognizer configured with the given options.
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.tuarua.firebase:Vision:dispose"><apiName>dispose</apiName><shortdesc> Disposes the ANE and any Detector ANEs.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc> Disposes the ANE and any Detector ANEs. </apiDesc></apiOperationDetail></apiOperation><apiValue id="com.tuarua.firebase:Vision:vision:get"><apiName>vision</apiName><shortdesc> The Vision ANE instance.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiValueClassifier>com.tuarua.firebase:Vision</apiValueClassifier></apiValueDef><apiDesc> The Vision ANE instance. </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="com.tuarua.firebase:Auth"><apiName>Auth</apiName><shortdesc/><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef></apiClassifierDetail><apiOperation id="com.tuarua.firebase:Auth:createUserWithEmailAndPassword"><apiName>createUserWithEmailAndPassword</apiName><shortdesc> Creates and, on success, signs in a user with the given email address and password.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>email</apiItemName><apiType value="String"/><apiDesc>    </apiDesc></apiParam><apiParam><apiItemName>password</apiItemName><apiType value="String"/><apiDesc>    </apiDesc></apiParam><apiParam><apiItemName>listener</apiItemName><apiType value="Function"/><apiData>null</apiData><apiDesc>Optional Function to be called on completion.
     The function is expected to have the following signature:
     <codeblock rev="3.0">
     function callback(error:AuthError):void {
     
     }
     </codeblock>
     </apiDesc></apiParam></apiOperationDef><apiDesc> Creates and, on success, signs in a user with the given email address and password.
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.tuarua.firebase:Auth:dispose"><apiName>dispose</apiName><shortdesc> Disposes the ANE </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc> Disposes the ANE </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.tuarua.firebase:Auth:sendPasswordResetEmail"><apiName>sendPasswordResetEmail</apiName><shortdesc> Initiates a password reset for the given email address.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>email</apiItemName><apiType value="String"/><apiDesc>    </apiDesc></apiParam><apiParam><apiItemName>listener</apiItemName><apiType value="Function"/><apiData>null</apiData><apiDesc>Optional Function to be called on completion.
     The function is expected to have the following signature:
     <codeblock rev="3.0">
     function callback(error:AuthError):void {
     
     }
     </codeblock>
     </apiDesc></apiParam></apiOperationDef><apiDesc> Initiates a password reset for the given email address.
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.tuarua.firebase:Auth:signInAnonymously"><apiName>signInAnonymously</apiName><shortdesc> Asynchronously creates and becomes an anonymous user.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>listener</apiItemName><apiType value="Function"/><apiData>null</apiData><apiDesc>Optional Function to be called on completion.
     The function is expected to have the following signature:
     <codeblock rev="3.0">
     function callback(error:AuthError):void {
     
     }
     </codeblock>
     </apiDesc></apiParam></apiOperationDef><apiDesc> Asynchronously creates and becomes an anonymous user.
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.tuarua.firebase:Auth:signInWithCredential"><apiName>signInWithCredential</apiName><shortdesc> Asynchronously signs in to Firebase with the given 3rd-party credentials (e.g.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>credential</apiItemName><apiOperationClassifier>com.tuarua.firebase.auth:AuthCredential</apiOperationClassifier><apiDesc>    </apiDesc></apiParam><apiParam><apiItemName>listener</apiItemName><apiType value="Function"/><apiData>null</apiData><apiDesc>Optional Function to be called on completion.
     The function is expected to have the following signature:
     <codeblock rev="3.0">
     function callback(error:AuthError):void {
     
     }
     </codeblock>
     </apiDesc></apiParam></apiOperationDef><apiDesc> Asynchronously signs in to Firebase with the given 3rd-party credentials (e.g. a Facebook
     login Access Token, a Google ID Token/Access Token pair, etc.) and returns additional
     identity provider data.
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.tuarua.firebase:Auth:signInWithCustomToken"><apiName>signInWithCustomToken</apiName><shortdesc> Asynchronously signs in to Firebase with the given Auth token.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>token</apiItemName><apiType value="String"/><apiDesc>A self-signed custom auth token.
     </apiDesc></apiParam><apiParam><apiItemName>listener</apiItemName><apiType value="Function"/><apiData>null</apiData><apiDesc>Optional Function to be called on completion.
     The function is expected to have the following signature:
     <codeblock rev="3.0">
     function callback(error:AuthError):void {
     
     }
     </codeblock>
     </apiDesc></apiParam></apiOperationDef><apiDesc> Asynchronously signs in to Firebase with the given Auth token.
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.tuarua.firebase:Auth:signInWithProvider"><apiName>signInWithProvider</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>provider</apiItemName><apiOperationClassifier>com.tuarua.firebase.auth:OAuthProvider</apiOperationClassifier></apiParam><apiParam><apiItemName>listener</apiItemName><apiType value="Function"/><apiData>null</apiData></apiParam></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="com.tuarua.firebase:Auth:signOut"><apiName>signOut</apiName><shortdesc> Signs out the current user.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc> Signs out the current user.</apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.tuarua.firebase:Auth:verifyPhoneNumber"><apiName>verifyPhoneNumber</apiName><shortdesc>
     Starts the phone number authentication flow by sending a verifcation code to the
     specified phone number.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>phoneNumber</apiItemName><apiType value="String"/><apiDesc>The phone number to be verified.
     </apiDesc></apiParam><apiParam><apiItemName>listener</apiItemName><apiType value="Function"/><apiDesc>Optional Function to be called on completion.
     The function is expected to have the following signature:
     <codeblock rev="3.0">
     function callback(error:AuthError):void {
     
     }
     </codeblock>
     </apiDesc></apiParam></apiOperationDef><apiDesc>
     Starts the phone number authentication flow by sending a verifcation code to the
     specified phone number.
     
     </apiDesc></apiOperationDetail></apiOperation><apiValue id="com.tuarua.firebase:Auth:currentUser:get"><apiName>currentUser</apiName><shortdesc> Synchronously gets the cached current user, or null if there is none.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>com.tuarua.firebase.auth:FirebaseUser</apiValueClassifier></apiValueDef><apiDesc> Synchronously gets the cached current user, or null if there is none. </apiDesc></apiValueDetail></apiValue><apiValue id="com.tuarua.firebase:Auth:languageCode:set"><apiName>languageCode</apiName><shortdesc>The current user language code.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>The current user language code.</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="com.tuarua.firebase:Firestore"><apiName>Firestore</apiName><shortdesc/><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef></apiClassifierDetail><apiOperation id="com.tuarua.firebase:Firestore:batch"><apiName>batch</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>com.tuarua.firebase.firestore:WriteBatch</apiOperationClassifier></apiReturn></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="com.tuarua.firebase:Firestore:collection"><apiName>collection</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>com.tuarua.firebase.firestore:CollectionReference</apiOperationClassifier></apiReturn><apiParam><apiItemName>collectionPath</apiItemName><apiType value="String"/></apiParam></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="com.tuarua.firebase:Firestore:disableNetwork"><apiName>disableNetwork</apiName><shortdesc>
     Disables usage of the network by this Firestore instance.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>listener</apiItemName><apiType value="Function"/><apiData>null</apiData><apiDesc>Optional Function to be called on completion.
     The function is expected to have the following signature:
     <codeblock rev="3.0">
     function callback(error:FirestoreError):void {
     
     }
     </codeblock>
     </apiDesc></apiParam></apiOperationDef><apiDesc>
     Disables usage of the network by this Firestore instance. It can be re-enabled by via
     <codeph>enableNetwork</codeph>. While the network is disabled, any snapshot listeners or get calls
     will return results from cache and any write operations will be queued until the network is
     restored.
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.tuarua.firebase:Firestore:dispose"><apiName>dispose</apiName><shortdesc> Disposes the ANE </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc> Disposes the ANE </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.tuarua.firebase:Firestore:document"><apiName>document</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>com.tuarua.firebase.firestore:DocumentReference</apiOperationClassifier></apiReturn><apiParam><apiItemName>documentPath</apiItemName><apiType value="String"/><apiData>null</apiData></apiParam></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="com.tuarua.firebase:Firestore:enableNetwork"><apiName>enableNetwork</apiName><shortdesc>
     Re-enables usage of the network by this Firestore instance after a prior call to
     disableNetwork.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>listener</apiItemName><apiType value="Function"/><apiData>null</apiData><apiDesc>Optional Function to be called on completion.
     The function is expected to have the following signature:
     <codeblock rev="3.0">
     function callback(error:FirestoreError):void {
     
     }
     </codeblock>
     </apiDesc></apiParam></apiOperationDef><apiDesc>
     Re-enables usage of the network by this Firestore instance after a prior call to
     <codeph>disableNetwork</codeph>.
     </apiDesc></apiOperationDetail></apiOperation><apiValue id="com.tuarua.firebase:Firestore:settings:set"><apiName>settings</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="readwrite"/><apiValueClassifier>com.tuarua.firebase.firestore:FirestoreSettings</apiValueClassifier></apiValueDef></apiValueDetail></apiValue><apiValue id="com.tuarua.firebase:Firestore:loggingEnabled:get"><apiName>loggingEnabled</apiName><shortdesc> Whether logging from the Firestore client is enabled/disabled.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc> Whether logging from the Firestore client is enabled/disabled. </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="com.tuarua.firebase:DynamicLinks"><apiName>DynamicLinks</apiName><shortdesc/><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef></apiClassifierDetail><apiOperation id="com.tuarua.firebase:DynamicLinks:buildDynamicLink"><apiName>buildDynamicLink</apiName><shortdesc> Create a long or short Dynamic Link.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>dynamicLink</apiItemName><apiOperationClassifier>com.tuarua.firebase.dynamiclinks:DynamicLink</apiOperationClassifier><apiDesc>    </apiDesc></apiParam><apiParam><apiItemName>listener</apiItemName><apiType value="Function"/><apiDesc>Optional Function to be called on completion
     The function is expected to have the following signature:
     <codeblock rev="3.0">
     function callback(dynamicLinkResult:DynamicLinkResult, error:DynamicLinkError):void {
     
     }
     </codeblock>
     </apiDesc></apiParam><apiParam><apiItemName>copyToClipboard</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>    </apiDesc></apiParam><apiParam><apiItemName>shorten</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>    </apiDesc></apiParam><apiParam><apiItemName>suffix</apiItemName><apiType value="int"/><apiData>0</apiData><apiDesc>    </apiDesc></apiParam></apiOperationDef><apiDesc> Create a long or short Dynamic Link.
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.tuarua.firebase:DynamicLinks:dispose"><apiName>dispose</apiName><shortdesc> Disposes the ANE </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc> Disposes the ANE </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.tuarua.firebase:DynamicLinks:getDynamicLink"><apiName>getDynamicLink</apiName><shortdesc> Determine if the app has a pending dynamic link and provide access to the dynamic link parameters.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>listener</apiItemName><apiType value="Function"/><apiDesc>Optional Function to be called on completion
     The function is expected to have the following signature:
     <codeblock rev="3.0">
     function callback(dynamicLinkResult:DynamicLinkResult, error:DynamicLinkError):void {
     
     }
     </codeblock>
     </apiDesc></apiParam></apiOperationDef><apiDesc> Determine if the app has a pending dynamic link and provide access to the dynamic link parameters.
     </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="com.tuarua.firebase:Messaging"><apiName>Messaging</apiName><shortdesc/><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef></apiClassifierDetail><apiOperation id="com.tuarua.firebase:Messaging:dispose"><apiName>dispose</apiName><shortdesc> Disposes the ANE </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc> Disposes the ANE </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.tuarua.firebase:Messaging:subscribe"><apiName>subscribe</apiName><shortdesc>
      Asynchronously subscribes to a topic.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>toTopic</apiItemName><apiType value="String"/><apiDesc>The name of the topic, for example, "sports".
     </apiDesc></apiParam></apiOperationDef><apiDesc>
      Asynchronously subscribes to a topic.
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.tuarua.firebase:Messaging:unsubscribe"><apiName>unsubscribe</apiName><shortdesc>
      Asynchronously unsubscribe from a topic.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>fromTopic</apiItemName><apiType value="String"/><apiDesc>The name of the topic, for example "sports".
     </apiDesc></apiParam></apiOperationDef><apiDesc>
      Asynchronously unsubscribe from a topic.
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="com.tuarua.firebase:Messaging:token:get"><apiName>token</apiName><shortdesc>
      The FCM token is used to identify this device so that FCM can send notifications to it.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef><apiDesc>
      <p>The FCM token is used to identify this device so that FCM can send notifications to it.
      It is associated with your APNS token when the APNS token is supplied, so that sending
      messages to the FCM token will be delivered over APNS. </p>
      <p>The FCM token is sometimes refreshed automatically.</p>
      <p>Once you have an FCM token, you should send it to your application server, so it can use
      the FCM token to send notifications to your device.</p>
     </apiDesc></apiValueDetail></apiValue><apiValue id="com.tuarua.firebase:Messaging:channelId:set"><apiName>channelId</apiName><shortdesc> The id of the channel.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="write"/><apiType value="String"/></apiValueDef><apiDesc> The id of the channel. Must be unique per package. The value may be truncated if
     it is too long.
     </apiDesc></apiValueDetail></apiValue><apiValue id="com.tuarua.firebase:Messaging:channelName:set"><apiName>channelName</apiName><shortdesc>
     The user visible name of the channel.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="write"/><apiType value="String"/></apiValueDef><apiDesc>
     The user visible name of the channel. The recommended maximum length is 40 characters;
     the value may be truncated if it is too long.
     </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="com.tuarua.firebase:Performance"><apiName>Performance</apiName><shortdesc/><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef></apiClassifierDetail><apiOperation id="com.tuarua.firebase:Performance:dispose"><apiName>dispose</apiName><shortdesc> Disposes the ANE </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc> Disposes the ANE </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.tuarua.firebase:Performance:init"><apiName>init</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef></apiOperationDetail></apiOperation><apiValue id="com.tuarua.firebase:Performance:isDataCollectionEnabled:get"><apiName>isDataCollectionEnabled</apiName><shortdesc>
     Controls the capture of performance data.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
     Controls the capture of performance data. When this value is set to NO, none of the performance
     data will sent to the server. Default is true.
     
     This setting is persisted, and is applied on future invocations of your application. Once
     explicitly set, it overrides any settings in your Info.plist.
     </apiDesc></apiValueDetail></apiValue><apiValue id="com.tuarua.firebase:Performance:isInstrumentationEnabled:get"><apiName>isInstrumentationEnabled</apiName><shortdesc>
     Controls the instrumentation of the app to capture performance data.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
     Controls the instrumentation of the app to capture performance data. When this value is set to
     NO, the app will not be instrumented to collect performance data (in scenarios like app_start,
     networking monitoring). Default is true.
     
     This setting is persisted, and is applied on future invocations of your application. Once
     explicitly set, it overrides any settings in your Info.plist.
     </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="com.tuarua.firebase:RemoteConfig"><apiName>RemoteConfig</apiName><shortdesc/><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef></apiClassifierDetail><apiOperation id="com.tuarua.firebase:RemoteConfig:activate"><apiName>activate</apiName><shortdesc>
     Asynchronously activates the most recently fetched configs, so that the fetched key value pairs take effect.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
     Asynchronously activates the most recently fetched configs, so that the fetched key value pairs take effect.
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.tuarua.firebase:RemoteConfig:addEventListener"><apiName>addEventListener</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiType value="String"/></apiParam><apiParam><apiItemName>listener</apiItemName><apiType value="Function"/></apiParam><apiParam><apiItemName>useCapture</apiItemName><apiType value="Boolean"/><apiData>false</apiData></apiParam><apiParam><apiItemName>priority</apiItemName><apiType value="int"/><apiData>0</apiData></apiParam><apiParam><apiItemName>useWeakReference</apiItemName><apiType value="Boolean"/><apiData>false</apiData></apiParam></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="com.tuarua.firebase:RemoteConfig:dispose"><apiName>dispose</apiName><shortdesc> Disposes the ANE </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc> Disposes the ANE </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.tuarua.firebase:RemoteConfig:fetchAndActivate"><apiName>fetchAndActivate</apiName><shortdesc>
     Asynchronously fetches and then activates the fetched configs.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
     Asynchronously fetches and then activates the fetched configs.
     If the time elapsed since the last fetch from the Firebase Remote Config backend is more than the default
     minimum fetch interval, configs are fetched from the backend.
     After the fetch is complete, the configs are activated so that the fetched key value pairs take effect.
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.tuarua.firebase:RemoteConfig:fetch"><apiName>fetch</apiName><shortdesc>
     Fetches Remote Config data and sets a duration that specifies how long config data lasts.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>cacheExpirationSeconds</apiItemName><apiType value="int"/><apiData>unknown</apiData><apiDesc>Duration that defines how long fetched config data is available,
     in seconds. When the config data expires, a new fetch is required.
     </apiDesc></apiParam></apiOperationDef><apiDesc>
     Fetches Remote Config data and sets a duration that specifies how long config data lasts.
     Call activateFetched to make fetched data available to your app.
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.tuarua.firebase:RemoteConfig:getBoolean"><apiName>getBoolean</apiName><shortdesc> Gets the value as a Boolean.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>key</apiItemName><apiType value="String"/></apiParam></apiOperationDef><apiDesc> Gets the value as a Boolean. </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.tuarua.firebase:RemoteConfig:getByteArray"><apiName>getByteArray</apiName><shortdesc> Gets the value as a ByteArray.</shortdesc><prolog><asCustoms><deprecated></deprecated></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="flash.utils:ByteArray"/></apiReturn><apiParam><apiItemName>key</apiItemName><apiType value="String"/></apiParam></apiOperationDef><apiDesc> Gets the value as a ByteArray.
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.tuarua.firebase:RemoteConfig:getDouble"><apiName>getDouble</apiName><shortdesc> Gets the value as a Double.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Number"/></apiReturn><apiParam><apiItemName>key</apiItemName><apiType value="String"/></apiParam></apiOperationDef><apiDesc> Gets the value as a Double. </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.tuarua.firebase:RemoteConfig:getKeysByPrefix"><apiName>getKeysByPrefix</apiName><shortdesc> Returns the set of parameter keys that start with the given prefix, from the default namespace
     in the active config.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Vector$String"/></apiReturn><apiParam><apiItemName>prefix</apiItemName><apiType value="String"/></apiParam></apiOperationDef><apiDesc> Returns the set of parameter keys that start with the given prefix, from the default namespace
     in the active config.</apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.tuarua.firebase:RemoteConfig:getLong"><apiName>getLong</apiName><shortdesc> Gets the value as a Long.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="int"/></apiReturn><apiParam><apiItemName>key</apiItemName><apiType value="String"/></apiParam></apiOperationDef><apiDesc> Gets the value as a Long. </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.tuarua.firebase:RemoteConfig:getString"><apiName>getString</apiName><shortdesc> Gets the value as a String.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="String"/></apiReturn><apiParam><apiItemName>key</apiItemName><apiType value="String"/></apiParam></apiOperationDef><apiDesc> Gets the value as a String. </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.tuarua.firebase:RemoteConfig:removeEventListener"><apiName>removeEventListener</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiType value="String"/></apiParam><apiParam><apiItemName>listener</apiItemName><apiType value="Function"/></apiParam><apiParam><apiItemName>useCapture</apiItemName><apiType value="Boolean"/><apiData>false</apiData></apiParam></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="com.tuarua.firebase:RemoteConfig:setDefaults"><apiName>setDefaults</apiName><shortdesc> Sets config defaults for parameter keys and values in the default namespace config.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="Object"/></apiParam></apiOperationDef><apiDesc> Sets config defaults for parameter keys and values in the default namespace config. </apiDesc></apiOperationDetail></apiOperation><apiValue id="com.tuarua.firebase:RemoteConfig:ONE_DAY"><apiName>ONE_DAY</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>86400</apiData><apiType value="int"/></apiValueDef></apiValueDetail></apiValue><apiValue id="com.tuarua.firebase:RemoteConfig:info:get"><apiName>info</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>com.tuarua.firebase.remoteconfig:RemoteConfigInfo</apiValueClassifier></apiValueDef></apiValueDetail></apiValue><apiValue id="com.tuarua.firebase:RemoteConfig:shared:get"><apiName>shared</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiValueClassifier>com.tuarua.firebase:RemoteConfig</apiValueClassifier></apiValueDef></apiValueDetail></apiValue><apiValue id="com.tuarua.firebase:RemoteConfig:configSettings:set"><apiName>configSettings</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiValueClassifier>com.tuarua.firebase.remoteconfig:RemoteConfigSettings</apiValueClassifier></apiValueDef></apiValueDetail></apiValue></apiClassifier><apiClassifier id="com.tuarua.firebase:FirebaseOptions"><apiName>FirebaseOptions</apiName><shortdesc/><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef></apiClassifierDetail><apiConstructor id="com.tuarua.firebase:FirebaseOptions:FirebaseOptions"><apiName>FirebaseOptions</apiName><shortdesc/><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef></apiConstructorDetail></apiConstructor><apiValue id="com.tuarua.firebase:FirebaseOptions:androidClientId"><apiName>androidClientId</apiName><shortdesc> The Android client ID used in Google AppInvite when an iOS app has its Android version,
     for example &amp;#64;12345.apps.googleusercontent.com. </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="String"/></apiValueDef><apiDesc> <p>The Android client ID used in Google AppInvite when an iOS app has its Android version,
     for example @12345.apps.googleusercontent.com.</p> </apiDesc></apiValueDetail></apiValue><apiValue id="com.tuarua.firebase:FirebaseOptions:apiKey"><apiName>apiKey</apiName><shortdesc> API key used for authenticating requests from your app. </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="String"/></apiValueDef><apiDesc> <p>API key used for authenticating requests from your app.</p> </apiDesc></apiValueDetail></apiValue><apiValue id="com.tuarua.firebase:FirebaseOptions:bundleId"><apiName>bundleId</apiName><shortdesc> The bundle ID for the application.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="String"/></apiValueDef><apiDesc> <p>The bundle ID for the application. Defaults to [[NSBundle mainBundle] bundleID] when not set
     manually or in a plist.</p> </apiDesc></apiValueDetail></apiValue><apiValue id="com.tuarua.firebase:FirebaseOptions:clientId"><apiName>clientId</apiName><shortdesc> The OAuth2 client ID for iOS application used to authenticate Google users, for
     example &amp;#64;12345.apps.googleusercontent.com, used for signing in with Google. </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="String"/></apiValueDef><apiDesc> <p>The OAuth2 client ID for iOS application used to authenticate Google users, for
     example @12345.apps.googleusercontent.com, used for signing in with Google.</p> </apiDesc></apiValueDetail></apiValue><apiValue id="com.tuarua.firebase:FirebaseOptions:databaseUrl"><apiName>databaseUrl</apiName><shortdesc> The database root URL, e.g.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="String"/></apiValueDef><apiDesc> <p>The database root URL, e.g. //abc-xyz-123.firebaseio.com.</p> </apiDesc></apiValueDetail></apiValue><apiValue id="com.tuarua.firebase:FirebaseOptions:deepLinkUrlScheme"><apiName>deepLinkUrlScheme</apiName><shortdesc> The URL scheme used to set up Durable Deep Link service. </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="String"/></apiValueDef><apiDesc> <p>The URL scheme used to set up Durable Deep Link service.</p> </apiDesc></apiValueDetail></apiValue><apiValue id="com.tuarua.firebase:FirebaseOptions:gcmSenderId"><apiName>gcmSenderId</apiName><shortdesc> The Project Number from the Google Developer's console, for example 012345678901, used to
     configure Google Cloud Messaging. </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="String"/></apiValueDef><apiDesc> <p>The Project Number from the Google Developer's console, for example 012345678901, used to
     configure Google Cloud Messaging.</p> </apiDesc></apiValueDetail></apiValue><apiValue id="com.tuarua.firebase:FirebaseOptions:googleAppId"><apiName>googleAppId</apiName><shortdesc> The Google App ID that is used to uniquely identify an instance of an app. </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="String"/></apiValueDef><apiDesc> <p>The Google App ID that is used to uniquely identify an instance of an app.</p> </apiDesc></apiValueDetail></apiValue><apiValue id="com.tuarua.firebase:FirebaseOptions:projectId"><apiName>projectId</apiName><shortdesc> The Google Cloud project ID, e.g.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="String"/></apiValueDef><apiDesc> <p>The Google Cloud project ID, e.g. my-project-1234</p> </apiDesc></apiValueDetail></apiValue><apiValue id="com.tuarua.firebase:FirebaseOptions:storageBucket"><apiName>storageBucket</apiName><shortdesc> The Google Cloud Storage bucket name, e.g.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="String"/></apiValueDef><apiDesc> <p>The Google Cloud Storage bucket name, e.g. abc-xyz-123.storage.firebase.com.</p> </apiDesc></apiValueDetail></apiValue><apiValue id="com.tuarua.firebase:FirebaseOptions:trackingId"><apiName>trackingId</apiName><shortdesc> The tracking ID for Google Analytics, e.g.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="String"/></apiValueDef><apiDesc> <p>The tracking ID for Google Analytics, e.g. @UA-12345678-1, used to configure Google Analytics.</p> </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="com.tuarua.firebase:Crashlytics"><apiName>Crashlytics</apiName><shortdesc/><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef></apiClassifierDetail><apiConstructor id="com.tuarua.firebase:Crashlytics:Crashlytics"><apiName>Crashlytics</apiName><shortdesc/><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef></apiConstructorDetail></apiConstructor><apiOperation id="com.tuarua.firebase:Crashlytics:crash"><apiName>crash</apiName><shortdesc>
      The easiest way to cause a crash - great for testing!
     </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      The easiest way to cause a crash - great for testing!
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.tuarua.firebase:Crashlytics:didCrashOnPreviousExecution"><apiName>didCrashOnPreviousExecution</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/></apiReturn></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="com.tuarua.firebase:Crashlytics:dispose"><apiName>dispose</apiName><shortdesc> Disposes the ANE </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc> Disposes the ANE </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.tuarua.firebase:Crashlytics:log"><apiName>log</apiName><shortdesc>
      This method can be used to record a non-fatal error message.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>message</apiItemName><apiType value="String"/><apiDesc>The message
     </apiDesc></apiParam></apiOperationDef><apiDesc>
      This method can be used to record a non-fatal error message. Android Only.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.tuarua.firebase:Crashlytics:recordException"><apiName>recordException</apiName><shortdesc>
      This method can be used to record a single exception structure in a report.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>error</apiItemName><apiType value="Error"/><apiDesc>The custom Error
     </apiDesc></apiParam></apiOperationDef><apiDesc>
      This method can be used to record a single exception structure in a report.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.tuarua.firebase:Crashlytics:setCustomKey"><apiName>setCustomKey</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>key</apiItemName><apiType value="String"/></apiParam><apiParam><apiItemName>value</apiItemName><apiType value="any"/></apiParam></apiOperationDef></apiOperationDetail></apiOperation><apiValue id="com.tuarua.firebase:Crashlytics:enabled:get"><apiName>enabled</apiName><shortdesc>
      This Boolean enables or disables logging.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      This Boolean enables or disables logging. The default value is true.
     </apiDesc></apiValueDetail></apiValue><apiValue id="com.tuarua.firebase:Crashlytics:userId:set"><apiName>userId</apiName><shortdesc>
      Specify a user identifier which will be visible in the Crashlytics UI.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="String"/></apiValueDef><apiDesc>
      Specify a user identifier which will be visible in the Crashlytics UI.
     
      Many of our customers have requested the ability to tie crashes to specific end-users of their
      application in order to facilitate responses to support requests or permit the ability to reach
      out for more information. We allow you to specify up to three separate values for display within
      the Crashlytics UI - but please be mindful of your end-user's privacy.
     
      We recommend specifying a user identifier - an arbitrary string that ties an end-user to a record
      in your system. This could be a database id, hash, or other value that is meaningless to a
      third-party observer but can be indexed and queried by you.
     
      Optionally, you may also specify the end-user's name or username, as well as email address if you
      do not have a system that works well with obscured identifiers.
     
      Pursuant to our EULA, this data is transferred securely throughout our system and we will not
      disseminate end-user data unless required to by law. That said, if you choose to provide end-user
      contact information, we strongly recommend that you disclose this in your application's privacy
      policy. Data privacy is of our utmost concern.
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="com.tuarua.firebase:Analytics"><apiName>Analytics</apiName><shortdesc/><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef></apiClassifierDetail><apiOperation id="com.tuarua.firebase:Analytics:dispose"><apiName>dispose</apiName><shortdesc> Disposes the ANE </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc> Disposes the ANE </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.tuarua.firebase:Analytics:logEvent"><apiName>logEvent</apiName><shortdesc>
     </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>name</apiItemName><apiType value="String"/><apiDesc><p>The name of the event. Should contain 1 to 40 alphanumeric characters or
     underscores. The name must start with an alphabetic character. Some event names are
     reserved.</p>
     </apiDesc></apiParam><apiParam><apiItemName>params</apiItemName><apiType value="Object"/><apiDesc><p>The Object of event parameters. Passing null indicates that the event has
     no parameters. Parameter names can be up to 40 characters long and must start with an
     alphabetic character and contain only alphanumeric characters and underscores. Only String
     and Number parameter types are
     supported.</p>
     </apiDesc></apiParam></apiOperationDef><apiDesc>
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.tuarua.firebase:Analytics:resetAnalyticsData"><apiName>resetAnalyticsData</apiName><shortdesc> Clears all analytics data for this app from the device and resets the app instance id.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc> Clears all analytics data for this app from the device and resets the app instance id.
     Android only.</apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.tuarua.firebase:Analytics:setUserProperty"><apiName>setUserProperty</apiName><shortdesc>
     </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>name</apiItemName><apiType value="String"/><apiDesc><p>The name of the user property to set. Should contain 1 to 24 alphanumeric characters
     or underscores and must start with an alphabetic character. The "firebase_", "google_", and
     "ga_" prefixes are reserved and should not be used for user property names.</p>
     </apiDesc></apiParam><apiParam><apiItemName>value</apiItemName><apiType value="String"/><apiDesc><p>The value of the user property. Values can be up to 36 characters long. Setting the
     value to null removes the user property.</p>
     </apiDesc></apiParam></apiOperationDef><apiDesc>
     </apiDesc></apiOperationDetail></apiOperation><apiValue id="com.tuarua.firebase:Analytics:appInstanceId:get"><apiName>appInstanceId</apiName><shortdesc> The unique ID for this instance of the application.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef><apiDesc> The unique ID for this instance of the application. </apiDesc></apiValueDetail></apiValue><apiValue id="com.tuarua.firebase:Analytics:analyticsCollectionEnabled:set"><apiName>analyticsCollectionEnabled</apiName><shortdesc>
     Sets whether analytics collection is enabled for this app on this device.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="Boolean"/></apiValueDef><apiDesc>
     Sets whether analytics collection is enabled for this app on this device. This setting is
     persisted across app sessions. By default it is enabled.
     </apiDesc></apiValueDetail></apiValue><apiValue id="com.tuarua.firebase:Analytics:currentScreen:set"><apiName>currentScreen</apiName><shortdesc>
     The name of the current screen.</shortdesc><prolog><asCustoms><deprecated>
     </deprecated></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="String"/></apiValueDef><apiDesc>
     The name of the current screen. Should contain 1 to 100 characters.
     Set to null to clear the current screen name.
     </apiDesc></apiValueDetail></apiValue><apiValue id="com.tuarua.firebase:Analytics:defaultEventParameters:set"><apiName>defaultEventParameters</apiName><shortdesc>
     Adds parameters that will be set on every event logged from the SDK, including automatic ones.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="Object"/></apiValueDef><apiDesc>
     Adds parameters that will be set on every event logged from the SDK, including automatic ones.
     The values passed in the parameters dictionary will be added to the dictionary of default event parameters.
     These parameters persist across app runs. They are of lower precedence than event parameters,
     so if an event parameter and a parameter set using this API have the same name, the value of the event
     parameter will be used. The same limitations on event parameters apply to default event parameters.
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="com.tuarua.firebase:Analytics:minimumSessionDuration:set"><apiName>minimumSessionDuration</apiName><shortdesc>
     Sets the minimum engagement time in seconds required to start a new session.</shortdesc><prolog><asCustoms><deprecated>
     </deprecated></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="Number"/></apiValueDef><apiDesc>
     Sets the minimum engagement time in seconds required to start a new session. The default value
     is 10000 milliseconds.
     </apiDesc></apiValueDetail></apiValue><apiValue id="com.tuarua.firebase:Analytics:sessionTimeoutDuration:set"><apiName>sessionTimeoutDuration</apiName><shortdesc>
     Sets the interval of inactivity in seconds that terminates the current session.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="Number"/></apiValueDef><apiDesc>
     Sets the interval of inactivity in seconds that terminates the current session. The default
     value is 1800000 milliseconds (30 minutes).
     </apiDesc></apiValueDetail></apiValue><apiValue id="com.tuarua.firebase:Analytics:userId:set"><apiName>userId</apiName><shortdesc>
     The user ID to ascribe to the user of this app on this device, which must be
     non-empty and no more than 256 characters long.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="String"/></apiValueDef><apiDesc>
     The user ID to ascribe to the user of this app on this device, which must be
     non-empty and no more than 256 characters long. Setting userID to null removes the user ID.
     </apiDesc></apiValueDetail></apiValue></apiClassifier></apiPackage>