<?xml version="1.0" encoding="UTF-8"?><apiPackage id="com.tuarua.firebase.firestore"><apiName>com.tuarua.firebase.firestore</apiName><apiDetail/><apiClassifier id="com.tuarua.firebase.firestore:Order"><apiName>Order</apiName><shortdesc/><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef></apiClassifierDetail><apiConstructor id="com.tuarua.firebase.firestore:Order:Order"><apiName>Order</apiName><shortdesc/><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>by</apiItemName><apiType value="String"/></apiParam><apiParam><apiItemName>descending</apiItemName><apiType value="Boolean"/><apiData>false</apiData></apiParam></apiConstructorDef></apiConstructorDetail></apiConstructor><apiValue id="com.tuarua.firebase.firestore:Order:by"><apiName>by</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="com.tuarua.firebase.firestore:Order:descending"><apiName>descending</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Boolean"/></apiValueDef></apiValueDetail></apiValue></apiClassifier><apiClassifier id="com.tuarua.firebase.firestore:FirestoreError"><apiName>FirestoreError</apiName><shortdesc/><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Error</apiBaseClassifier></apiClassifierDef></apiClassifierDetail><apiConstructor id="com.tuarua.firebase.firestore:FirestoreError:FirestoreError"><apiName>FirestoreError</apiName><shortdesc/><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>message</apiItemName><apiType value="any"/><apiData/></apiParam><apiParam><apiItemName>id</apiItemName><apiType value="any"/><apiData>0</apiData></apiParam></apiConstructorDef></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="com.tuarua.firebase.firestore:Query"><apiName>Query</apiName><shortdesc/><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef></apiClassifierDetail><apiConstructor id="com.tuarua.firebase.firestore:Query:Query"><apiName>Query</apiName><shortdesc/><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef></apiConstructorDetail></apiConstructor><apiOperation id="com.tuarua.firebase.firestore:Query:endAt"><apiName>endAt</apiName><shortdesc>
     Creates a new query where the results end at the provided document (inclusive).</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>com.tuarua.firebase.firestore:Query</apiOperationClassifier></apiReturn><apiParam><apiItemName>args</apiItemName><apiType value="restParam"/><apiDesc>    </apiDesc></apiParam></apiOperationDef><apiDesc>
     Creates a new query where the results end at the provided document (inclusive).
     The end position is relative to the order of the query. The document must contain all of the
     fields provided in the orderBy of this query.
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.tuarua.firebase.firestore:Query:endBefore"><apiName>endBefore</apiName><shortdesc>
     Creates a new query where the results end before the provided document (exclusive).</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>com.tuarua.firebase.firestore:Query</apiOperationClassifier></apiReturn><apiParam><apiItemName>args</apiItemName><apiType value="restParam"/><apiDesc>    </apiDesc></apiParam></apiOperationDef><apiDesc>
     Creates a new query where the results end before the provided document (exclusive).
     The end position is relative to the order of the query. The document must contain all of the
     fields provided in the orderBy of this query.
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.tuarua.firebase.firestore:Query:getDocuments"><apiName>getDocuments</apiName><shortdesc>
     Executes the query and returns the results as a QuerySnapshot
     
     </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>listener</apiItemName><apiType value="Function"/><apiDesc>Optional Function to be called on completion.
     The function is expected to have the following signature:
     <codeblock rev="3.0">
     function callback(snapshot:QuerySnapshot, error:FirestoreError):void {
     
     }
     </codeblock>
     </apiDesc></apiParam></apiOperationDef><apiDesc>
     Executes the query and returns the results as a QuerySnapshot
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.tuarua.firebase.firestore:Query:limit"><apiName>limit</apiName><shortdesc>
     Creates a new query where the results are limited to the specified number of documents.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>com.tuarua.firebase.firestore:Query</apiOperationClassifier></apiReturn><apiParam><apiItemName>to</apiItemName><apiType value="int"/><apiDesc>The maximum number of items to return.
     </apiDesc></apiParam></apiOperationDef><apiDesc>
     Creates a new query where the results are limited to the specified number of documents.
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.tuarua.firebase.firestore:Query:map"><apiName>map</apiName><shortdesc>
     Converts the Document into an as3 Class with properties mapped to the Document's fields.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>to</apiItemName><apiType value="Class"/><apiDesc>AS3 class to map to
     </apiDesc></apiParam></apiOperationDef><apiDesc>
     Converts the Document into an as3 Class with properties mapped to the Document's fields.
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.tuarua.firebase.firestore:Query:order"><apiName>order</apiName><shortdesc>
     Creates a new query where the results are sorted by the specified field, in descending or ascending order.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>com.tuarua.firebase.firestore:Query</apiOperationClassifier></apiReturn><apiParam><apiItemName>by</apiItemName><apiType value="String"/><apiDesc>The field to sort by.
     </apiDesc></apiParam><apiParam><apiItemName>descending</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>direction to sort by
     </apiDesc></apiParam></apiOperationDef><apiDesc>
     Creates a new query where the results are sorted by the specified field, in descending or ascending order.
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.tuarua.firebase.firestore:Query:startAfter"><apiName>startAfter</apiName><shortdesc>
     Creates a new query where the results start after the provided document (exclusive).</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>com.tuarua.firebase.firestore:Query</apiOperationClassifier></apiReturn><apiParam><apiItemName>args</apiItemName><apiType value="restParam"/><apiDesc>    </apiDesc></apiParam></apiOperationDef><apiDesc>
     Creates a new query where the results start after the provided document (exclusive).
     The starting position is relative to the order of the query. The document must contain all of the
     fields provided in the orderBy of this query.
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.tuarua.firebase.firestore:Query:startAt"><apiName>startAt</apiName><shortdesc>
     Creates a new query where the results start at the provided document (inclusive).</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>com.tuarua.firebase.firestore:Query</apiOperationClassifier></apiReturn><apiParam><apiItemName>args</apiItemName><apiType value="restParam"/><apiDesc>    </apiDesc></apiParam></apiOperationDef><apiDesc>
     Creates a new query where the results start at the provided document (inclusive).
     The starting position is relative to the order of the query. The document must contain all of the
     fields provided in the orderBy of the query.
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.tuarua.firebase.firestore:Query:where"><apiName>where</apiName><shortdesc>
     Creates a new query that returns only documents that include the specified fields and where
     the values satisfy the constraints provided.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>com.tuarua.firebase.firestore:Query</apiOperationClassifier></apiReturn><apiParam><apiItemName>fieldPath</apiItemName><apiType value="String"/><apiDesc>The path to compare.
     </apiDesc></apiParam><apiParam><apiItemName>operator</apiItemName><apiType value="String"/><apiDesc>The operation string (e.g "&lt;", "&lt;=", "==", "&gt;", "&gt;=").
     </apiDesc></apiParam><apiParam><apiItemName>value</apiItemName><apiType value="any"/><apiDesc>The value for comparison.
     </apiDesc></apiParam></apiOperationDef><apiDesc>
     Creates a new query that returns only documents that include the specified fields and where
     the values satisfy the constraints provided.
     </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="com.tuarua.firebase.firestore:DocumentChangeType"><apiName>DocumentChangeType</apiName><shortdesc/><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef></apiClassifierDetail><apiValue id="com.tuarua.firebase.firestore:DocumentChangeType:ADDED"><apiName>ADDED</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>0</apiData><apiType value="int"/></apiValueDef></apiValueDetail></apiValue><apiValue id="com.tuarua.firebase.firestore:DocumentChangeType:MODIFIED"><apiName>MODIFIED</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>1</apiData><apiType value="int"/></apiValueDef></apiValueDetail></apiValue><apiValue id="com.tuarua.firebase.firestore:DocumentChangeType:REMOVED"><apiName>REMOVED</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>2</apiData><apiType value="int"/></apiValueDef></apiValueDetail></apiValue></apiClassifier><apiClassifier id="com.tuarua.firebase.firestore:DocumentChange"><apiName>DocumentChange</apiName><shortdesc/><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef></apiClassifierDetail><apiConstructor id="com.tuarua.firebase.firestore:DocumentChange:DocumentChange"><apiName>DocumentChange</apiName><shortdesc/><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef></apiConstructorDetail></apiConstructor><apiValue id="com.tuarua.firebase.firestore:DocumentChange:documentId"><apiName>documentId</apiName><shortdesc> The ID of the document for which this DocumentSnapshot contains data.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="String"/></apiValueDef><apiDesc> The ID of the document for which this <codeph>DocumentSnapshot</codeph> contains data. </apiDesc></apiValueDetail></apiValue><apiValue id="com.tuarua.firebase.firestore:DocumentChange:newIndex"><apiName>newIndex</apiName><shortdesc>
     The index of the changed document in the result set immediately after this DocumentChange
     (i.e.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="int"/></apiValueDef><apiDesc>
     The index of the changed document in the result set immediately after this DocumentChange
     (i.e. supposing that all prior DocumentChange objects and the current DocumentChange object
     have been applied).
     </apiDesc></apiValueDetail></apiValue><apiValue id="com.tuarua.firebase.firestore:DocumentChange:oldIndex"><apiName>oldIndex</apiName><shortdesc>
     The index of the changed document in the result set immediately prior to this DocumentChange
     (i.e.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="int"/></apiValueDef><apiDesc>
     The index of the changed document in the result set immediately prior to this DocumentChange
     (i.e. supposing that all prior DocumentChange objects have been applied).
     </apiDesc></apiValueDetail></apiValue><apiValue id="com.tuarua.firebase.firestore:DocumentChange:type"><apiName>type</apiName><shortdesc> The type of change that occurred (added, modified, or removed).</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="int"/></apiValueDef><apiDesc> The type of change that occurred (added, modified, or removed). </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="com.tuarua.firebase.firestore:QuerySnapshot"><apiName>QuerySnapshot</apiName><shortdesc/><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef></apiClassifierDetail><apiConstructor id="com.tuarua.firebase.firestore:QuerySnapshot:QuerySnapshot"><apiName>QuerySnapshot</apiName><shortdesc/><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef></apiConstructorDetail></apiConstructor><apiValue id="com.tuarua.firebase.firestore:QuerySnapshot:documentChanges"><apiName>documentChanges</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>unknown</apiData><apiType value="Vector$com.tuarua.firebase.firestore:DocumentChange"/></apiValueDef></apiValueDetail></apiValue><apiValue id="com.tuarua.firebase.firestore:QuerySnapshot:documents"><apiName>documents</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>unknown</apiData><apiType value="Vector$com.tuarua.firebase.firestore:DocumentSnapshot"/></apiValueDef></apiValueDetail></apiValue><apiValue id="com.tuarua.firebase.firestore:QuerySnapshot:metadata"><apiName>metadata</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>com.tuarua.firebase.firestore:SnapshotMetadata</apiValueClassifier></apiValueDef></apiValueDetail></apiValue><apiValue id="com.tuarua.firebase.firestore:QuerySnapshot:isEmpty:get"><apiName>isEmpty</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef></apiValueDetail></apiValue><apiValue id="com.tuarua.firebase.firestore:QuerySnapshot:size:get"><apiName>size</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef></apiValueDetail></apiValue></apiClassifier><apiClassifier id="com.tuarua.firebase.firestore:CollectionReference"><apiName>CollectionReference</apiName><shortdesc/><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>com.tuarua.firebase.firestore:Query</apiBaseClassifier></apiClassifierDef></apiClassifierDetail><apiConstructor id="com.tuarua.firebase.firestore:CollectionReference:CollectionReference"><apiName>CollectionReference</apiName><shortdesc>
     Gets a CollectionReference referring to the collection at the specified path within the
     database.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>path</apiItemName><apiType value="String"/><apiDesc>    </apiDesc></apiParam></apiConstructorDef><apiDesc>
     Gets a <codeph>CollectionReference</codeph> referring to the collection at the specified path within the
     database.
     </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="com.tuarua.firebase.firestore:CollectionReference:addDocument"><apiName>addDocument</apiName><shortdesc>
     Add a new document to this collection with the specified data, assigning it a document ID automatically.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>A DocumentReference pointing to a new document with an auto-generated ID.
     </apiDesc><apiOperationClassifier>com.tuarua.firebase.firestore:DocumentReference</apiOperationClassifier></apiReturn><apiParam><apiItemName>data</apiItemName><apiType value="any"/><apiDesc>    </apiDesc></apiParam><apiParam><apiItemName>listener</apiItemName><apiType value="Function"/><apiData>null</apiData><apiDesc>Optional Function to be called on completion.
     The function is expected to have the following signature:
     <codeblock rev="3.0">
     function callback(path:String, error:FirestoreError):void {
     
     }
     </codeblock>
     </apiDesc></apiParam></apiOperationDef><apiDesc>
     Add a new document to this collection with the specified data, assigning it a document ID automatically.
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.tuarua.firebase.firestore:CollectionReference:document"><apiName>document</apiName><shortdesc>
     </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>A DocumentReference pointing to the document at the specified path or if documentPath is null a
     new document with an auto-generated ID.
     </apiDesc><apiOperationClassifier>com.tuarua.firebase.firestore:DocumentReference</apiOperationClassifier></apiReturn><apiParam><apiItemName>documentPath</apiItemName><apiType value="String"/><apiData>null</apiData></apiParam></apiOperationDef><apiDesc>
     </apiDesc></apiOperationDetail></apiOperation><apiValue id="com.tuarua.firebase.firestore:CollectionReference:id:get"><apiName>id</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="com.tuarua.firebase.firestore:CollectionReference:parent:get"><apiName>parent</apiName><shortdesc>
     For subcollections, parent returns the containing DocumentReference.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>com.tuarua.firebase.firestore:DocumentReference</apiValueClassifier></apiValueDef><apiDesc>
     For subcollections, <codeph>parent</codeph> returns the containing <codeph>DocumentReference</codeph>.  For root
     collections, null is returned.
     </apiDesc></apiValueDetail></apiValue><apiValue id="com.tuarua.firebase.firestore:CollectionReference:path:get"><apiName>path</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef></apiValueDetail></apiValue></apiClassifier><apiClassifier id="com.tuarua.firebase.firestore:GeoPoint"><apiName>GeoPoint</apiName><shortdesc/><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef></apiClassifierDetail><apiConstructor id="com.tuarua.firebase.firestore:GeoPoint:GeoPoint"><apiName>GeoPoint</apiName><shortdesc/><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef></apiConstructorDetail></apiConstructor><apiValue id="com.tuarua.firebase.firestore:GeoPoint:latitude"><apiName>latitude</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef></apiValueDetail></apiValue><apiValue id="com.tuarua.firebase.firestore:GeoPoint:longitude"><apiName>longitude</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef></apiValueDetail></apiValue></apiClassifier><apiClassifier id="com.tuarua.firebase.firestore:DocumentSnapshot"><apiName>DocumentSnapshot</apiName><shortdesc/><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef></apiClassifierDetail><apiConstructor id="com.tuarua.firebase.firestore:DocumentSnapshot:DocumentSnapshot"><apiName>DocumentSnapshot</apiName><shortdesc/><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>id</apiItemName><apiType value="String"/></apiParam><apiParam><apiItemName>data</apiItemName><apiType value="any"/></apiParam><apiParam><apiItemName>exists</apiItemName><apiType value="Boolean"/></apiParam><apiParam><apiItemName>metadata</apiItemName><apiOperationClassifier>com.tuarua.firebase.firestore:SnapshotMetadata</apiOperationClassifier></apiParam></apiConstructorDef></apiConstructorDetail></apiConstructor><apiValue id="com.tuarua.firebase.firestore:DocumentSnapshot:data"><apiName>data</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value=""/></apiValueDef></apiValueDetail></apiValue><apiValue id="com.tuarua.firebase.firestore:DocumentSnapshot:exists"><apiName>exists</apiName><shortdesc> True if the document exists.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>false</apiData><apiType value="Boolean"/></apiValueDef><apiDesc> True if the document exists. </apiDesc></apiValueDetail></apiValue><apiValue id="com.tuarua.firebase.firestore:DocumentSnapshot:id"><apiName>id</apiName><shortdesc> The ID of the document for which this DocumentSnapshot contains data.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="String"/></apiValueDef><apiDesc> The ID of the document for which this <codeph>DocumentSnapshot</codeph> contains data. </apiDesc></apiValueDetail></apiValue><apiValue id="com.tuarua.firebase.firestore:DocumentSnapshot:metadata"><apiName>metadata</apiName><shortdesc> Metadata about this snapshot concerning its source and if it has local modifications.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>com.tuarua.firebase.firestore:SnapshotMetadata</apiValueClassifier></apiValueDef><apiDesc> Metadata about this snapshot concerning its source and if it has local modifications. </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="com.tuarua.firebase.firestore:SnapshotMetadata"><apiName>SnapshotMetadata</apiName><shortdesc/><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef></apiClassifierDetail><apiConstructor id="com.tuarua.firebase.firestore:SnapshotMetadata:SnapshotMetadata"><apiName>SnapshotMetadata</apiName><shortdesc/><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef></apiConstructorDetail></apiConstructor><apiValue id="com.tuarua.firebase.firestore:SnapshotMetadata:hasPendingWrites"><apiName>hasPendingWrites</apiName><shortdesc>
     Returns true if the snapshot contains the result of local writes (e.g.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Boolean"/></apiValueDef><apiDesc>
     Returns true if the snapshot contains the result of local writes (e.g. set() or update() calls)
     that have not yet been committed to the backend. If your listener has opted into metadata updates
     you will receive another snapshot with <codeph>hasPendingWrites</codeph> equal to NO once the writes have
     been committed to the backend.
     </apiDesc></apiValueDetail></apiValue><apiValue id="com.tuarua.firebase.firestore:SnapshotMetadata:isFromCache"><apiName>isFromCache</apiName><shortdesc>
     Returns true if the snapshot was created from cached data rather than guaranteed up-to-date server
     data.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Boolean"/></apiValueDef><apiDesc>
     Returns true if the snapshot was created from cached data rather than guaranteed up-to-date server
     data. If your listener has opted into metadata updates you will receive another snapshot
     with <codeph>isFromCache</codeph> equal to NO once
     the client has received up-to-date data from the backend.
     </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="com.tuarua.firebase.firestore:FirestoreErrorCode"><apiName>FirestoreErrorCode</apiName><shortdesc/><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef></apiClassifierDetail><apiValue id="com.tuarua.firebase.firestore:FirestoreErrorCode:ABORTED"><apiName>ABORTED</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>10</apiData><apiType value="int"/></apiValueDef></apiValueDetail></apiValue><apiValue id="com.tuarua.firebase.firestore:FirestoreErrorCode:ALREADY_EXISTS"><apiName>ALREADY_EXISTS</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>6</apiData><apiType value="int"/></apiValueDef></apiValueDetail></apiValue><apiValue id="com.tuarua.firebase.firestore:FirestoreErrorCode:CANCELLED"><apiName>CANCELLED</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>1</apiData><apiType value="int"/></apiValueDef></apiValueDetail></apiValue><apiValue id="com.tuarua.firebase.firestore:FirestoreErrorCode:DATA_LOSS"><apiName>DATA_LOSS</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>15</apiData><apiType value="int"/></apiValueDef></apiValueDetail></apiValue><apiValue id="com.tuarua.firebase.firestore:FirestoreErrorCode:DEADLINE_EXCEEDED"><apiName>DEADLINE_EXCEEDED</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>4</apiData><apiType value="int"/></apiValueDef></apiValueDetail></apiValue><apiValue id="com.tuarua.firebase.firestore:FirestoreErrorCode:FAILED_PRECONDITION"><apiName>FAILED_PRECONDITION</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>9</apiData><apiType value="int"/></apiValueDef></apiValueDetail></apiValue><apiValue id="com.tuarua.firebase.firestore:FirestoreErrorCode:INTERNAL"><apiName>INTERNAL</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>13</apiData><apiType value="int"/></apiValueDef></apiValueDetail></apiValue><apiValue id="com.tuarua.firebase.firestore:FirestoreErrorCode:INVALID_ARGUMENT"><apiName>INVALID_ARGUMENT</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>3</apiData><apiType value="int"/></apiValueDef></apiValueDetail></apiValue><apiValue id="com.tuarua.firebase.firestore:FirestoreErrorCode:NOT_FOUND"><apiName>NOT_FOUND</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>5</apiData><apiType value="int"/></apiValueDef></apiValueDetail></apiValue><apiValue id="com.tuarua.firebase.firestore:FirestoreErrorCode:OK"><apiName>OK</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>0</apiData><apiType value="int"/></apiValueDef></apiValueDetail></apiValue><apiValue id="com.tuarua.firebase.firestore:FirestoreErrorCode:OUT_OF_RANGE"><apiName>OUT_OF_RANGE</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>11</apiData><apiType value="int"/></apiValueDef></apiValueDetail></apiValue><apiValue id="com.tuarua.firebase.firestore:FirestoreErrorCode:PERMISSION_DENIED"><apiName>PERMISSION_DENIED</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>7</apiData><apiType value="int"/></apiValueDef></apiValueDetail></apiValue><apiValue id="com.tuarua.firebase.firestore:FirestoreErrorCode:RESOURCE_EXHAUSTED"><apiName>RESOURCE_EXHAUSTED</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>8</apiData><apiType value="int"/></apiValueDef></apiValueDetail></apiValue><apiValue id="com.tuarua.firebase.firestore:FirestoreErrorCode:UNAUTHENTICATED"><apiName>UNAUTHENTICATED</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>16</apiData><apiType value="int"/></apiValueDef></apiValueDetail></apiValue><apiValue id="com.tuarua.firebase.firestore:FirestoreErrorCode:UNAVAILABLE"><apiName>UNAVAILABLE</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>14</apiData><apiType value="int"/></apiValueDef></apiValueDetail></apiValue><apiValue id="com.tuarua.firebase.firestore:FirestoreErrorCode:UNIMPLEMENTED"><apiName>UNIMPLEMENTED</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>12</apiData><apiType value="int"/></apiValueDef></apiValueDetail></apiValue><apiValue id="com.tuarua.firebase.firestore:FirestoreErrorCode:UNKNOWN"><apiName>UNKNOWN</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>2</apiData><apiType value="int"/></apiValueDef></apiValueDetail></apiValue></apiClassifier><apiClassifier id="com.tuarua.firebase.firestore:ServerTimestampFieldValue"><apiName>ServerTimestampFieldValue</apiName><shortdesc/><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>com.tuarua.firebase.firestore:FieldValue</apiBaseClassifier></apiClassifierDef></apiClassifierDetail><apiValue id="com.tuarua.firebase.firestore:ServerTimestampFieldValue:methodName"><apiName>methodName</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>FieldValue.serverTimestamp</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue></apiClassifier><apiClassifier id="com.tuarua.firebase.firestore:DeleteFieldValue"><apiName>DeleteFieldValue</apiName><shortdesc/><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>com.tuarua.firebase.firestore:FieldValue</apiBaseClassifier></apiClassifierDef></apiClassifierDetail><apiValue id="com.tuarua.firebase.firestore:DeleteFieldValue:methodName"><apiName>methodName</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>FieldValue.delete</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue></apiClassifier><apiClassifier id="com.tuarua.firebase.firestore:FieldValue"><apiName>FieldValue</apiName><shortdesc/><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef></apiClassifierDetail><apiOperation id="com.tuarua.firebase.firestore:FieldValue:increment"><apiName>increment</apiName><shortdesc>
     Returns a special value that can be used with set() or update() that tells the
     server to increment the field's current value by the given value.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiDesc>The FieldValue sentinel for use in a call to set() or update().
     </apiDesc><apiOperationClassifier>com.tuarua.firebase.firestore:FieldValue</apiOperationClassifier></apiReturn><apiParam><apiItemName>by</apiItemName><apiType value="Number"/></apiParam></apiOperationDef><apiDesc>
     Returns a special value that can be used with set() or update() that tells the
     server to increment the field's current value by the given value.
     
     <p>If the current value is an integer or a double, both the current and the given value will be
     interpreted as doubles and all arithmetic will follow IEEE 754 semantics. Otherwise, the
     transformation will set the field to the given value.</p>
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.tuarua.firebase.firestore:FieldValue:remove"><apiName>remove</apiName><shortdesc> Returns a sentinel for use with update() to mark a field for deletion.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiOperationClassifier>com.tuarua.firebase.firestore:FieldValue</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc> Returns a sentinel for use with update() to mark a field for deletion. </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.tuarua.firebase.firestore:FieldValue:serverTimestamp"><apiName>serverTimestamp</apiName><shortdesc>
     Returns a sentinel for use with set() or update() to include a server-generated
     timestamp in the written data.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiOperationClassifier>com.tuarua.firebase.firestore:FieldValue</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
     Returns a sentinel for use with set() or update() to include a server-generated
     timestamp in the written data.
     </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="com.tuarua.firebase.firestore:FirestoreSettings"><apiName>FirestoreSettings</apiName><shortdesc/><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef></apiClassifierDetail><apiConstructor id="com.tuarua.firebase.firestore:FirestoreSettings:FirestoreSettings"><apiName>FirestoreSettings</apiName><shortdesc/><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef></apiConstructorDetail></apiConstructor><apiValue id="com.tuarua.firebase.firestore:FirestoreSettings:areTimestampsInSnapshotsEnabled"><apiName>areTimestampsInSnapshotsEnabled</apiName><shortdesc>
     Specifies whether to use FIRTimestamps for timestamp fields in FIRDocumentSnapshots.</shortdesc><prolog><asCustoms><deprecated>This setting now defaults to true and will be removed in a future release. If you are
     already setting it to true, just remove the setting. If you are setting it to false, you should
     update your code to expect FIRTimestamp objects instead of NSDate and then remove the setting.
     </deprecated></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>true</apiData><apiType value="Boolean"/></apiValueDef><apiDesc>
     Specifies whether to use FIRTimestamps for timestamp fields in FIRDocumentSnapshots. This is
     now enabled by default and should not be disabled.
     
     Previously, Firestore returned timestamp fields as NSDate but NSDate is implemented as a double
     which loses precision and causes unexpected behavior when using a timestamp from a snapshot as a
     part of a subsequent query.
     
     So now Firestore returns FIRTimestamp values instead of NSDate, avoiding this kind of problem.
     
     To opt into the old behavior of returning NSDate objects, you can temporarily set
     areTimestampsInSnapshotsEnabled to false.
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="com.tuarua.firebase.firestore:FirestoreSettings:host"><apiName>host</apiName><shortdesc> The hostname to connect to.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="String"/></apiValueDef><apiDesc> The hostname to connect to. </apiDesc></apiValueDetail></apiValue><apiValue id="com.tuarua.firebase.firestore:FirestoreSettings:isPersistenceEnabled"><apiName>isPersistenceEnabled</apiName><shortdesc> Set to false to disable local persistent storage.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>true</apiData><apiType value="Boolean"/></apiValueDef><apiDesc> Set to false to disable local persistent storage. </apiDesc></apiValueDetail></apiValue><apiValue id="com.tuarua.firebase.firestore:FirestoreSettings:isSslEnabled"><apiName>isSslEnabled</apiName><shortdesc> Whether to use SSL when connecting.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>true</apiData><apiType value="Boolean"/></apiValueDef><apiDesc> Whether to use SSL when connecting. </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="com.tuarua.firebase.firestore:Where"><apiName>Where</apiName><shortdesc/><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef></apiClassifierDetail><apiConstructor id="com.tuarua.firebase.firestore:Where:Where"><apiName>Where</apiName><shortdesc/><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>fieldPath</apiItemName><apiType value="String"/></apiParam><apiParam><apiItemName>operator</apiItemName><apiType value="String"/></apiParam><apiParam><apiItemName>value</apiItemName><apiType value="any"/></apiParam></apiConstructorDef></apiConstructorDetail></apiConstructor><apiValue id="com.tuarua.firebase.firestore:Where:fieldPath:get"><apiName>fieldPath</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="com.tuarua.firebase.firestore:Where:operator:get"><apiName>operator</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="com.tuarua.firebase.firestore:Where:value:get"><apiName>value</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/></apiValueDef></apiValueDetail></apiValue></apiClassifier><apiClassifier id="com.tuarua.firebase.firestore:NumericIncrementFieldValue"><apiName>NumericIncrementFieldValue</apiName><shortdesc/><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>com.tuarua.firebase.firestore:FieldValue</apiBaseClassifier></apiClassifierDef></apiClassifierDetail><apiConstructor id="com.tuarua.firebase.firestore:NumericIncrementFieldValue:NumericIncrementFieldValue"><apiName>NumericIncrementFieldValue</apiName><shortdesc/><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>operand</apiItemName><apiType value="Number"/></apiParam></apiConstructorDef></apiConstructorDetail></apiConstructor><apiValue id="com.tuarua.firebase.firestore:NumericIncrementFieldValue:methodName"><apiName>methodName</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>FieldValue.increment</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="com.tuarua.firebase.firestore:NumericIncrementFieldValue:operand"><apiName>operand</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef></apiValueDetail></apiValue></apiClassifier><apiClassifier id="com.tuarua.firebase.firestore:WriteBatch"><apiName>WriteBatch</apiName><shortdesc/><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef></apiClassifierDetail><apiConstructor id="com.tuarua.firebase.firestore:WriteBatch:WriteBatch"><apiName>WriteBatch</apiName><shortdesc> Creates a new write batch </shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc> Creates a new write batch </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="com.tuarua.firebase.firestore:WriteBatch:commit"><apiName>commit</apiName><shortdesc>
     Commits all of the writes in this write batch as a single atomic unit.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>listener</apiItemName><apiType value="Function"/><apiData>null</apiData><apiDesc>Optional This function will only execute
     when the client is online and the commit has completed against the server. The
     completion handler will not be called when the device is offline, though local
     changes will be visible immediately.
     The function is expected to have the following signature:
     <codeblock rev="3.0">
     function callback(error:FirestoreError):void {
     
     }
     </codeblock>
     </apiDesc></apiParam></apiOperationDef><apiDesc>
     Commits all of the writes in this write batch as a single atomic unit.
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.tuarua.firebase.firestore:WriteBatch:deleteDocument"><apiName>deleteDocument</apiName><shortdesc>
     Deletes the document referred to by documentReference.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>documentReference</apiItemName><apiOperationClassifier>com.tuarua.firebase.firestore:DocumentReference</apiOperationClassifier><apiDesc>    </apiDesc></apiParam></apiOperationDef><apiDesc>
     Deletes the document referred to by <codeph>documentReference</codeph>.
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.tuarua.firebase.firestore:WriteBatch:setData"><apiName>setData</apiName><shortdesc>
     Writes to the document referred to by documentReference.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>This <codeph>WriteBatch</codeph> instance. Used for chaining method calls.
     </apiDesc><apiType value="void"/></apiReturn><apiParam><apiItemName>data</apiItemName><apiType value="any"/><apiDesc>    </apiDesc></apiParam><apiParam><apiItemName>forDocument</apiItemName><apiOperationClassifier>com.tuarua.firebase.firestore:DocumentReference</apiOperationClassifier><apiDesc>A reference to the document whose data should be overwritten.
     </apiDesc></apiParam><apiParam><apiItemName>merge</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Whether to merge the provided data into any existing document.
     </apiDesc></apiParam></apiOperationDef><apiDesc>
     Writes to the document referred to by <codeph>documentReference</codeph>. If the document doesn't yet exist,
     this method creates it and then sets the data. If the document exists, this method overwrites
     the document data with the new values.
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.tuarua.firebase.firestore:WriteBatch:updateData"><apiName>updateData</apiName><shortdesc>
     Updates fields in the document referred to by documentReference.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>data</apiItemName><apiType value="any"/><apiDesc>A reference to the document whose data should be overwritten.
     </apiDesc></apiParam><apiParam><apiItemName>forDocument</apiItemName><apiOperationClassifier>com.tuarua.firebase.firestore:DocumentReference</apiOperationClassifier><apiDesc>    </apiDesc></apiParam></apiOperationDef><apiDesc>
     Updates fields in the document referred to by <codeph>documentReference</codeph>.
     If document does not exist, the write batch will fail.
     
     </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="com.tuarua.firebase.firestore:DocumentReference"><apiName>DocumentReference</apiName><shortdesc/><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef></apiClassifierDetail><apiConstructor id="com.tuarua.firebase.firestore:DocumentReference:DocumentReference"><apiName>DocumentReference</apiName><shortdesc>
     Returns a DocumentReference pointing to a new document with an auto-generated ID.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>path</apiItemName><apiType value="String"/></apiParam></apiConstructorDef><apiDesc>
     Returns a DocumentReference pointing to a new document with an auto-generated ID.
     
     </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="com.tuarua.firebase.firestore:DocumentReference:addSnapshotListener"><apiName>addSnapshotListener</apiName><shortdesc>
     Attaches a listener for DocumentSnapshot events.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>listener</apiItemName><apiType value="Function"/><apiDesc>Optional Function to be called on completion.
     The function is expected to have the following signature:
     <codeblock rev="3.0">
     function callback(snapshot:DocumentSnapshot, error:FirestoreError, realtime:Boolean):void {
     
     }
     </codeblock>
     </apiDesc></apiParam></apiOperationDef><apiDesc>
     Attaches a listener for DocumentSnapshot events.
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.tuarua.firebase.firestore:DocumentReference:collection"><apiName>collection</apiName><shortdesc>
     </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>A CollectionReference pointing to the document at the specified path
     </apiDesc><apiOperationClassifier>com.tuarua.firebase.firestore:CollectionReference</apiOperationClassifier></apiReturn><apiParam><apiItemName>collectionPath</apiItemName><apiType value="String"/></apiParam></apiOperationDef><apiDesc>
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.tuarua.firebase.firestore:DocumentReference:getDocument"><apiName>getDocument</apiName><shortdesc>
     Reads the document referenced by this DocumentReference.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>listener</apiItemName><apiType value="Function"/><apiDesc>Optional Function to be called on completion.
     The function is expected to have the following signature:
     <codeblock rev="3.0">
     function callback(snapshot:DocumentSnapshot, error:FirestoreError, realtime:Boolean):void {
     
     }
     </codeblock>
     </apiDesc></apiParam></apiOperationDef><apiDesc>
     Reads the document referenced by this <codeph>DocumentReference</codeph>.
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.tuarua.firebase.firestore:DocumentReference:map"><apiName>map</apiName><shortdesc>
     Converts the Document into an as3 Class with properties mapped to the Document's fields.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>to</apiItemName><apiType value="Class"/><apiDesc>AS3 class to map to
     </apiDesc></apiParam></apiOperationDef><apiDesc>
     Converts the Document into an as3 Class with properties mapped to the Document's fields.
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.tuarua.firebase.firestore:DocumentReference:removeSnapshotListener"><apiName>removeSnapshotListener</apiName><shortdesc>
     Detaches a listener for DocumentSnapshot events.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>listener</apiItemName><apiType value="Function"/><apiDesc>    </apiDesc></apiParam></apiOperationDef><apiDesc>
     Detaches a listener for DocumentSnapshot events.
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.tuarua.firebase.firestore:DocumentReference:remove"><apiName>remove</apiName><shortdesc>
     Deletes the document referred to by this DocumentReference.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>listener</apiItemName><apiType value="Function"/><apiData>null</apiData><apiDesc>    </apiDesc></apiParam></apiOperationDef><apiDesc>
     Deletes the document referred to by this <codeph>DocumentReference</codeph>.
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.tuarua.firebase.firestore:DocumentReference:setData"><apiName>setData</apiName><shortdesc>
     Writes to the document referred to by this DocumentReference.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>data</apiItemName><apiType value="any"/><apiDesc>    </apiDesc></apiParam><apiParam><apiItemName>listener</apiItemName><apiType value="Function"/><apiData>null</apiData><apiDesc>Optional Function to be called on completion.
     The function is expected to have the following signature:
     <codeblock rev="3.0">
     function callback(path:String, error:FirestoreError):void {
     
     }
     </codeblock>
     </apiDesc></apiParam><apiParam><apiItemName>merge</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>    </apiDesc></apiParam></apiOperationDef><apiDesc>
     Writes to the document referred to by this DocumentReference. If the document does not yet
     exist, it will be created.
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.tuarua.firebase.firestore:DocumentReference:updateData"><apiName>updateData</apiName><shortdesc>
     Updates fields in the document referred to by this DocumentReference.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>data</apiItemName><apiType value="any"/><apiDesc>    </apiDesc></apiParam><apiParam><apiItemName>listener</apiItemName><apiType value="Function"/><apiData>null</apiData><apiDesc>Optional Function to be called on completion.
     The function is expected to have the following signature:
     <codeblock rev="3.0">
     function callback(path:String, error:FirestoreError):void {
     
     }
     </codeblock>
     </apiDesc></apiParam></apiOperationDef><apiDesc>
     Updates fields in the document referred to by this <codeph>DocumentReference</codeph>. If the document
     does not exist, the update fails and the specified completion block receives an error.
     
     </apiDesc></apiOperationDetail></apiOperation><apiValue id="com.tuarua.firebase.firestore:DocumentReference:parent:get"><apiName>parent</apiName><shortdesc> A reference to the collection to which this DocumentReference belongs.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>com.tuarua.firebase.firestore:CollectionReference</apiValueClassifier></apiValueDef><apiDesc> A reference to the collection to which this <codeph>DocumentReference</codeph> belongs. </apiDesc></apiValueDetail></apiValue><apiValue id="com.tuarua.firebase.firestore:DocumentReference:path:get"><apiName>path</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef></apiValueDetail></apiValue></apiClassifier></apiPackage>